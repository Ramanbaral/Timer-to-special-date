{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","days","setDays","hours","setHours","minutes","setMinutes","seconds","setSeconds","countDownDate","Date","interval","useRef","setTime","currentTime","diff","Math","floor","clearInterval","current","day","hour","min","sec","useEffect","setInterval","Fragment","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAiFeA,MA9Ef,WACE,MAAyBC,mBAAS,GAAlC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA8BJ,mBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAA8BN,mBAAS,GAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KACMC,EAAgB,IAAIC,KAAK,8BAE3BC,EAAWC,mBAEf,SAASC,IACP,IAAMC,EAAc,IAAIJ,KACpBK,EAAOC,KAAKC,OAAOR,EAAgBK,GAAa,KACpD,GAAY,IAATC,EACDG,cAAcP,EAASQ,aAGrB,CACF,IAAMC,EAAMJ,KAAKC,MAAOF,EAAK,OAC7BA,GAAmB,MAAJK,EACf,IAAMC,EAAQL,KAAKC,MAAOF,EAAK,MAC/BA,GAAoB,KAALM,EACf,IAAMC,EAAMN,KAAKC,MAAMF,EAAK,IAC5BA,GAAmB,GAAJO,EACf,IAAMC,EAAMP,KAAKC,MAAMF,GAEvBb,EAAQkB,GACRhB,EAASiB,GACTf,EAAWgB,GACXd,EAAWe,IAkBf,OAZAC,qBAAU,WAMR,OALAX,IACAF,EAAWc,aAAY,WACrBZ,MACC,KAEI,WACLK,cAAcP,EAASQ,YAEzB,IAIA,eAAC,IAAMO,SAAP,WACA,qBAAKC,UAAU,OAAf,uCACA,qBAAKA,UAAU,SAAf,SACE,sBAAKA,UAAU,kBAAf,UAEE,sBAAKA,UAAU,UAAf,UACE,qBAAKA,UAAU,QAAf,SAAwB1B,IACxB,qBAAK0B,UAAU,OAAf,qBAGF,sBAAKA,UAAU,UAAf,UACE,qBAAKA,UAAU,QAAf,SAAwBxB,IACxB,qBAAKwB,UAAU,OAAf,sBAGF,sBAAKA,UAAU,UAAf,UACE,qBAAKA,UAAU,QAAf,SAAwBtB,IACxB,qBAAKsB,UAAU,OAAf,wBAGF,sBAAKA,UAAU,UAAf,UACE,qBAAKA,UAAU,QAAf,SAAwBpB,IACxB,qBAAKoB,UAAU,OAAf,iCC5DKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.561ed134.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\nimport './App.css';\n\nfunction App() {\n  const [days,  setDays] = useState(0)\n  const [hours, setHours] = useState(0)\n  const [minutes, setMinutes] = useState(0)\n  const [seconds, setSeconds] = useState(0)\n  const countDownDate = new Date('November 23, 2021 00:00:00')\n\n  let interval = useRef()\n\n  function setTime() {\n    const currentTime = new Date()\n    let diff = Math.floor((countDownDate - currentTime)/1000)\n    if(diff === 0){\n      clearInterval(interval.current)\n    }\n\n    else{\n      const day = Math.floor((diff/86400))\n      diff = diff - (day*86400)\n      const hour  = Math.floor((diff/3600))\n      diff = diff - (hour*3600)\n      const min = Math.floor(diff/60)\n      diff = diff - (min*60)\n      const sec = Math.floor(diff)\n  \n      setDays(day)\n      setHours(hour)\n      setMinutes(min)\n      setSeconds(sec)\n\n    }\n\n  }\n\n  useEffect(() =>{\n    setTime()\n    interval = setInterval(() => {\n      setTime()\n    }, 1000)\n\n    return () => {\n      clearInterval(interval.current)\n    }\n  },[])\n\n\n  return(\n    <React.Fragment>\n    <div className=\"text\">My Birthday is coming in </div>\n    <div className='center'>\n      <div className=\"timer-container\">\n\n        <div className=\"timebox\">\n          <div className=\"digit\">{days}</div>\n          <div className=\"unit\">Days</div>\n        </div>\n\n        <div className=\"timebox\">\n          <div className=\"digit\">{hours}</div>\n          <div className=\"unit\">Hours</div>\n        </div>\n\n        <div className=\"timebox\">\n          <div className=\"digit\">{minutes}</div>\n          <div className=\"unit\">Minutes</div>\n        </div>\n\n        <div className=\"timebox\">\n          <div className=\"digit\">{seconds}</div>\n          <div className=\"unit\">Seconds</div>\n        </div>\n        \n      </div>\n    </div>\n    </React.Fragment>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}